trigger: none

variables:
  projectName: 'SRE_AZURE_CLASS'
  buildPipelineName: 'frontend_build'
  artifactName: 'frontend'                # This matches your publish step
  targetFile: 'app.py'                    # Example file inside your artifact

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    echo "Installing Azure DevOps CLI extension..."
    az extension add --name azure-devops || echo "Already installed."

    echo "Logging into Azure DevOps CLI using PAT..."
    echo "$(MY_DEVOPS_PAT)" | az devops login

    echo "Setting DevOps defaults..."
    az devops configure --defaults organization=https://dev.azure.com/opscosolutions project=$(projectName)

    echo "Resolving Pipeline ID for: $(buildPipelineName)..."
    PIPELINE_ID=$(az pipelines show --name "$(buildPipelineName)" --query id --output tsv)

    if [ -z "$PIPELINE_ID" ]; then
      echo "##vso[task.complete result=Failed;]Pipeline '$(buildPipelineName)' not found!"
      exit 1
    fi

    echo "Pipeline ID: $PIPELINE_ID"

    echo "Getting the latest successful build..."
    LAST_SUCCESSFUL_BUILD_ID=$(az pipelines build list \
      --definition-ids $PIPELINE_ID \
      --status completed \
      --result succeeded \
      --top 1 \
      --query '[0].id' \
      --output tsv)

    if [ -z "$LAST_SUCCESSFUL_BUILD_ID" ]; then
      echo "##vso[task.complete result=Failed;]No successful builds found!"
      exit 1
    fi

    echo "Last Successful Build ID: $LAST_SUCCESSFUL_BUILD_ID"

    echo "Downloading artifact '${artifactName}' from Build ID: $LAST_SUCCESSFUL_BUILD_ID..."
    mkdir -p artifacts
    az pipelines runs artifact download \
      --run-id $LAST_SUCCESSFUL_BUILD_ID \
      --artifact-name $(artifactName) \
      --path ./artifacts

    echo "Artifact downloaded."

    echo "Listing downloaded files..."
    ls -R ./artifacts

    echo "Displaying content of the target file: $(targetFile)..."
    TARGET_PATH="./artifacts/$(artifactName)/$(targetFile)"

    if [ -f "$TARGET_PATH" ]; then
      echo "===== Artifact File Content Start ====="
      cat "$TARGET_PATH"
      echo "===== Artifact File Content End ====="
    else
      echo "File '$TARGET_PATH' not found!"
      exit 1
    fi
  displayName: 'Fetch and Display Last Successful Build Artifact'
  env:
    MY_DEVOPS_PAT: $(MY_DEVOPS_PAT)