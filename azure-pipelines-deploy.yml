trigger: none

variables:
  projectName: 'SRE_AZURE_CLASS'
  buildPipelineName: 'frontend_build'
  artifactName: 'frontend'
  targetFile: 'app.py'                      # Optional: Which file inside artifact to display
  resourceGroup: 'sre_labs_omar'      # <-- Update this
  webAppName: 'finweb-omar'                 # Azure Web App target
  zipOutput: 'deploy.zip'                   # Final deployment package name


######################
# CATEGORY 1: DevOps CLI Setup and Login
######################
steps:
- script: |
    echo "Installing Azure DevOps CLI extension..."
    az extension add --name azure-devops || echo "Already installed."

    echo "Logging into Azure DevOps CLI using PAT..."
    echo "$(MY_DEVOPS_PAT)" | az devops login

    echo "Setting DevOps defaults..."
    az devops configure --defaults organization=https://dev.azure.com/opscosolutions project=$(projectName)

    echo "Resolving Pipeline ID for: $(buildPipelineName)..."
    PIPELINE_ID=$(az pipelines show --name "$(buildPipelineName)" --query id --output tsv)

    if [ -z "$PIPELINE_ID" ]; then
      echo "Pipeline not found!"
      exit 1
    fi

    echo "Looking for the latest successful build with artifacts..."

    for BUILD_ID in $(az pipelines build list \
      --definition-ids $PIPELINE_ID \
      --status completed \
      --result succeeded \
      --top 10 \
      --query '[].id' \
      --output tsv); do

      echo "Checking Build ID: $BUILD_ID"

      ARTIFACT_COUNT=$(az pipelines runs artifact list \
        --run-id $BUILD_ID \
        --query 'length(@)' \
        --output tsv)

      if [ "$ARTIFACT_COUNT" -gt 0 ]; then
        echo "Found build with artifacts: $BUILD_ID"
        SELECTED_BUILD_ID=$BUILD_ID
        break
      fi
    done

    if [ -z "$SELECTED_BUILD_ID" ]; then
      echo "##vso[task.complete result=Failed;]No successful builds with artifacts found in the last 10 builds!"
      exit 1
    fi

    echo "Downloading artifact from Build ID: $SELECTED_BUILD_ID..."
    mkdir -p artifacts
    az pipelines runs artifact download \
      --run-id $SELECTED_BUILD_ID \
      --artifact-name $(artifactName) \
      --path ./artifacts

    echo "Zipping artifact content for deployment..."
    cd artifacts
    zip -r ../$zipOutput .
    cd ..

    echo "Installing Azure WebApp CLI extension..."
    az extension add --name webapp || echo "Already installed."

    echo "Deploying $zipOutput to Azure Web App: $(webAppName)..."
    az webapp deploy \
      --resource-group $(resourceGroup) \
      --name $(webAppName) \
      --src-path $zipOutput \
      --type zip
  displayName: 'Fetch Last Successful Build That Has Artifacts'
  env:
    MY_DEVOPS_PAT: $(MY_DEVOPS_PAT)

