trigger: none

variables:
  projectName: 'SRE_AZURE_CLASS'
  buildPipelineName: 'frontend_build'
  artifactName: 'frontend'
  targetFile: 'app.py'                      # Optional: Which file inside artifact to display
  resourceGroup: 'sre_labs_omar'      # <-- Update this
  webAppName: 'finweb-omar'                 # Azure Web App target
  zipOutput: 'deploy.zip'                   # Final deployment package name


######################
# CATEGORY 1: DevOps CLI Setup and Login
######################
steps:
- script: |
    echo "Installing Azure DevOps CLI extension..."
    az extension add --name azure-devops || echo "Already installed."

    echo "Logging into Azure DevOps CLI using PAT..."
    echo "$(MY_DEVOPS_PAT)" | az devops login

    echo "Setting DevOps defaults..."
    az devops configure --defaults organization=https://dev.azure.com/opscosolutions project=$(projectName)
  displayName: 'Azure DevOps CLI Setup and Login'
  env:
    MY_DEVOPS_PAT: $(MY_DEVOPS_PAT)

######################
# CATEGORY 2: Identify Target Build (With Artifacts)
######################
- script: |
    echo "Resolving Pipeline ID for: $(buildPipelineName)..."
    PIPELINE_ID=$(az pipelines show --name "$(buildPipelineName)" --query id --output tsv)

    if [ -z "$PIPELINE_ID" ]; then
      echo "Pipeline not found!"
      exit 1
    fi

    echo "Searching for latest successful build with artifacts..."

    for BUILD_ID in $(az pipelines build list \
      --definition-ids $PIPELINE_ID \
      --status completed \
      --result succeeded \
      --top 10 \
      --query '[].id' \
      --output tsv); do

      echo "Checking Build ID: $BUILD_ID for artifacts..."

      ARTIFACT_COUNT=$(az pipelines runs artifact list \
        --run-id $BUILD_ID \
        --query 'length(@)' \
        --output tsv)

      if [ "$ARTIFACT_COUNT" -gt 0 ]; then
        echo "Found build with artifacts: $BUILD_ID"
        SELECTED_BUILD_ID=$BUILD_ID
        break
      fi
    done

    if [ -z "$(SELECTED_BUILD_ID)" ]; then
      echo "##vso[task.complete result=Failed;]No successful builds with artifacts found in the last 10 builds!"
      exit 1
    fi
  displayName: 'Find Last Successful Build with Artifacts'
  env:
    MY_DEVOPS_PAT: $(MY_DEVOPS_PAT)

######################
# CATEGORY 3: Download and Package Artifact
######################
- script: |
    echo "Downloading artifact '${artifactName}' from Build ID: $(SELECTED_BUILD_ID)..."
    mkdir -p artifacts
    az pipelines runs artifact download \
      --run-id $(SELECTED_BUILD_ID) \
      --artifact-name $(artifactName) \
      --path ./artifacts

    echo "Listing downloaded files..."
    ls -R ./artifacts

    echo "Displaying content of file: $(targetFile)..."
    TARGET_PATH="./artifacts/$(artifactName)/$(targetFile)"
    if [ -f "$TARGET_PATH" ]; then
      echo "===== File Content Start ====="
      cat "$TARGET_PATH"
      echo "===== File Content End ====="
    else
      echo "File '$TARGET_PATH' not found! Skipping display."
    fi

    echo "Zipping artifact for deployment..."
    cd ./artifacts/$(artifactName)
    zip -r ../../../$(zipOutput) .
    cd ../../../
  displayName: 'Download Artifact and Create Deployment Package'
  env:
    MY_DEVOPS_PAT: $(MY_DEVOPS_PAT)

######################
# CATEGORY 4: Deploy to Azure Web App
######################
- script: |
    echo "Installing Azure WebApp CLI extension..."
    az extension add --name webapp || echo "Already installed."

    echo "Deploying $(zipOutput) to Azure Web App: $(webAppName)..."
    az webapp deploy \
      --resource-group $(resourceGroup) \
      --name $(webAppName) \
      --src-path $(zipOutput) \
      --type zip

    echo "Deployment completed successfully."
  displayName: 'Deploy to Azure Web App'
