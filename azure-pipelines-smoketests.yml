name: test-webapps-$(Build.BuildId)

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  maxWaitSeconds: 480
  checkIntervalSeconds: 5

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'

# -------------------------------
# Wait for Backend App to be Ready
# -------------------------------
- script: |
    echo "‚è≥ Waiting for Backend App to become available..."

    back='https://finapi-omar.azurewebsites.net'
    front='https://finweb-omar.azurewebsites.net'
    start_time=$(date +%s)
    max_wait=${maxWaitSeconds:-480}
    interval=${checkIntervalSeconds:-5}

    while true; do
      status=$(curl -s -o /dev/null -w "%{http_code}" "$back/api/slow-endpoint")

      if [ "$status" -eq 200 ]; then
        echo "‚úÖ Backend is ready"
        break
      fi

      now=$(date +%s)
      elapsed=$((now - start_time))

      if [ "$elapsed" -ge "$max_wait" ]; then
        echo "‚ùå Backend did not become ready in $max_wait seconds"
        exit 1
      fi

      echo "‚è≥ Still waiting for backend... (${elapsed}s elapsed)"
      sleep "$interval"
    done
  displayName: 'Wait for Backend App to Be Ready'

# -------------------------------
# Wait for Frontend App to be Ready
# -------------------------------
- script: |
    echo "‚è≥ Waiting for Frontend App to become available..."

    start_time=$(date +%s)
    max_wait=${maxWaitSeconds:-480}
    interval=${checkIntervalSeconds:-5}

    while true; do
      status=$(curl -s -o /dev/null -w "%{http_code}" "$front/login")

      if [ "$status" -eq 200 ]; then
        echo "‚úÖ Frontend is ready"
        break
      fi

      now=$(date +%s)
      elapsed=$((now - start_time))

      if [ "$elapsed" -ge "$max_wait" ]; then
        echo "‚ùå Frontend did not become ready in $max_wait seconds"
        exit 1
      fi

      echo "‚è≥ Still waiting for frontend... (${elapsed}s elapsed)"
      sleep "$interval"
    done
  displayName: 'Wait for Frontend App to Be Ready'

# -------------------------------
# Backend Endpoint Tests
# -------------------------------
- script: |
    echo "üîç Testing Backend App Endpoints with curl..."

    declare -a backendEndpoints=(
      "/api/retrieve-price?symbol=TEST"
      "/api/client-valuation"
      "/high-cpu"
      "/high-memory"
      "/api/slow-endpoint"
    )

    for endpoint in "${backendEndpoints[@]}"; do
      full_url="${back}${endpoint}"
      echo "‚û°Ô∏è  Testing $full_url"
      http_status=$(curl -s -o /dev/null -w "%{http_code}" "$full_url")

      if [ "$http_status" -eq 200 ]; then
        echo "‚úÖ $endpoint OK"
      else
        echo "‚ùå $endpoint failed with status $http_status"
        exit 1
      fi
    done
  displayName: 'Run Backend Smoke Tests'

# -------------------------------
# Frontend Route Tests
# -------------------------------
- script: |
    echo "üîç Testing Frontend App Routes with curl..."

    declare -a frontendEndpoints=(
      "/"
      "/login"
      "/dashboard"
    )

    for endpoint in "${frontendEndpoints[@]}"; do
      full_url="${front}${endpoint}"
      echo "‚û°Ô∏è  Testing $full_url"
      http_status=$(curl -s -o /dev/null -w "%{http_code}" "$full_url")

      if [ "$http_status" -eq 200 ]; then
        echo "‚úÖ $endpoint
